#!/bin/bash

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
CLR_INFO='\033[1;97;44m'
CLR_SUCCESS='\033[1;30;42m'
CLR_WARNING='\033[1;37;41m'
CLR_ERROR='\033[1;31;40m'
CLR_RESET='\033[0m'
CLR_GREEN='\033[0;32m'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DILL_VERSION="v1.0.4"
DILL_DIR="$HOME/dill"
DILL_LINUX_AMD64_URL="https://dill-release.s3.ap-southeast-1.amazonaws.com/$DILL_VERSION/dill-$DILL_VERSION-linux-amd64.tar.gz"

# –õ–æ–≥–æ—Ç–∏–ø
function show_logo() {
    echo -e "${CLR_INFO}      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–∞–º–∏ Dill      ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
function install_dependencies() {
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y curl tar lsof
}


function install_node() {
    install_dependencies

    echo -e "${CLR_INFO}–°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Dill Node...${CLR_RESET}"
    mkdir -p "$DILL_DIR"
    cd "$DILL_DIR" || exit 1

    curl -O "$DILL_LINUX_AMD64_URL"
    tar -zxvf "dill-$DILL_VERSION-linux-amd64.tar.gz"

    # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ dill ‚Äî –ø–µ—Ä–µ–º–µ—Å—Ç–∏–º
    if [ -d "$DILL_DIR/dill" ]; then
        mv dill/* .
        rm -rf dill
    fi

    echo -e "${CLR_SUCCESS}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${CLR_RESET}"

    # –ó–∞–º–µ–Ω–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã
    sed -i 's/8545/8546/g' default_ports.txt
    sed -i 's/4000/4050/g' default_ports.txt

    echo -e "${CLR_SUCCESS}–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ—Ä—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã${CLR_RESET}"

    echo -e "${CLR_INFO}–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É —á–µ—Ä–µ–∑ 1_launch_dill_node.sh...${CLR_RESET}"
    bash "$DILL_DIR/1_launch_dill_node.sh"
}





# –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
function add_validator() {
    echo -e "${CLR_INFO}–î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞...${CLR_RESET}"
    bash "$DILL_DIR/2_add_validator.sh"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
function restart_node() {
    echo -e "${CLR_INFO}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Dill –Ω–æ–¥—É...${CLR_RESET}"
    bash "$DILL_DIR/start_dill_node.sh"
    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö pubkey –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
function show_pubkeys() {
    echo -e "${CLR_INFO}–°–ø–∏—Å–æ–∫ pubkey –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤:${CLR_RESET}"
    if [ -d "$DILL_DIR/validator_keys" ]; then
        grep -oP '(?<="pubkey": ")[^"]+' "$DILL_DIR"/validator_keys/*.json | sort -u
    else
        echo -e "${CLR_WARNING}–ü–∞–ø–∫–∞ validator_keys –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.${CLR_RESET}"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã (health check)
function check_node_status() {
    if [ -f "$DILL_DIR/health_check.sh" ]; then
        echo -e "${CLR_INFO}–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã...${CLR_RESET}"
        bash "$DILL_DIR/health_check.sh" -v
    else
        echo -e "${CLR_WARNING}–°–∫—Ä–∏–ø—Ç health_check.sh –Ω–µ –Ω–∞–π–¥–µ–Ω.${CLR_RESET}"
    fi
}


function remove_node() {
    echo -e "${CLR_WARNING}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É? (y/n)${CLR_RESET}"
    read -r confirm
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        echo -e "${CLR_INFO}–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —É–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É...${CLR_RESET}"

        if pgrep -f dill-node > /dev/null; then
            pkill -f dill-node
            echo -e "${CLR_SUCCESS}–ü—Ä–æ—Ü–µ—Å—Å dill-node –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${CLR_RESET}"
        else
            echo -e "${CLR_WARNING}–ü—Ä–æ—Ü–µ—Å—Å dill-node –Ω–µ –Ω–∞–π–¥–µ–Ω.${CLR_RESET}"
        fi

        if [ -d "$DILL_DIR" ]; then
            rm -rf "$DILL_DIR"
            echo -e "${CLR_SUCCESS}–ü–∞–ø–∫–∞ $DILL_DIR —É–¥–∞–ª–µ–Ω–∞.${CLR_RESET}"
        else
            echo -e "${CLR_WARNING}–ü–∞–ø–∫–∞ $DILL_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.${CLR_RESET}"
        fi
    else
        echo -e "${CLR_WARNING}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.${CLR_RESET}"
    fi
}


function show_menu() {
    show_logo
    echo -e "${CLR_GREEN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å light node${CLR_RESET}"
    echo -e "${CLR_GREEN}2) ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞${CLR_RESET}"
    echo -e "${CLR_GREEN}3) üîë –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ pubkey –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤${CLR_RESET}"
    echo -e "${CLR_GREEN}4) üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã${CLR_RESET}"
    echo -e "${CLR_GREEN}5) üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}6) üóë  –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}7) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"
    echo -ne "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ${CLR_RESET}"
    read -r choice
    case $choice in
        1) install_node ;;
        2) add_validator ;;
        3) show_pubkeys ;;
        4) check_node_status ;;
        5) restart_node ;;
        6) remove_node ;;
        7) exit 0 ;;
        *) echo -e "${CLR_ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${CLR_RESET}"; sleep 1; show_menu ;;
    esac
}

show_menu
