#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
CLR_INFO='\033[1;97;44m'
CLR_SUCCESS='\033[1;30;42m'
CLR_WARNING='\033[1;37;41m'
CLR_ERROR='\033[1;31;40m'
CLR_RESET='\033[0m'
CLR_GREEN='\033[0;32m'

# –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
BASE_DIR="$HOME/dria_docker_nodes"
mkdir -p "$BASE_DIR"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_SUCCESS} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã Dria ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function install_dependencies() {
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y git make jq build-essential gcc unzip wget curl docker.io
    sudo systemctl enable docker && sudo systemctl start docker
}

function install_node() {
    echo -e "${CLR_INFO}–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–¥—ã Dria...${CLR_RESET}"
    install_dependencies
    curl -fsSL https://dria.co/launcher | bash
    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ Dria —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!${CLR_RESET}"
}

function configure_node() {
    echo -e "${CLR_INFO}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–æ–¥—ã...${CLR_RESET}"
    dkn-compute-launcher settings
}

function start_node() {
    echo -e "${CLR_INFO}üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã Dria –≤ screen —Å–µ—Å—Å–∏–∏...${CLR_RESET}"
    if screen -list | grep -q "dria_node"; then
        echo -e "${CLR_WARNING}‚ö† –ù–æ–¥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ screen —Å–µ—Å—Å–∏–∏ 'dria_node'.${CLR_RESET}"
    else
        screen -dmS dria_node bash -c "dkn-compute-launcher start; exec bash"
        echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ Dria —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –≤ screen —Å–µ—Å—Å–∏–∏ 'dria_node'!${CLR_RESET}"
    fi
}

function update_node() {
    echo -e "${CLR_INFO}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏...${CLR_RESET}"
    dkn-compute-launcher update
    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!${CLR_RESET}"
}

function measure_models() {
    echo -e "${CLR_INFO}–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π...${CLR_RESET}"
    dkn-compute-launcher measure
}

function remove_node() {
    echo -e "${CLR_WARNING}‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É Dria? (y/n)${CLR_RESET}"
    read -r confirmation
    if [[ "$confirmation" == "y" || "$confirmation" == "Y" ]]; then
        echo -e "${CLR_INFO}üöÄ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Dria...${CLR_RESET}"
        screen -X -S dria_node quit
        rm -rf .dria
        echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ Dria —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.${CLR_RESET}"
    else
        echo -e "${CLR_INFO}‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.${CLR_RESET}"
    fi
}

add_new_docker_node() {
    echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ip:port:username:password:${CLR_RESET}"
    read -r proxy_input

    if ! [[ "$proxy_input" =~ ^[0-9.]+:[0-9]+:.+:.+$ ]]; then
        echo -e "${CLR_ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π ip:port:user:pass${CLR_RESET}"
        return
    fi

    port=4001
    while ss -tuln | grep -q ":$port "; do
        ((port++))
    done

    node_dir="$BASE_DIR/dria_node_$port"
    mkdir -p "$node_dir"

    IFS=':' read -r proxy_ip proxy_port proxy_user proxy_pass <<< "$proxy_input"

    cat > "$node_dir/Dockerfile" <<EOF
FROM ubuntu:22.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt update && \
    apt install -y curl screen proxychains4 && \
    curl -L https://github.com/firstbatchxyz/dkn-compute-launcher/releases/download/v0.1.5/dkn-compute-launcher-linux-amd64 -o /usr/local/bin/dkn-compute-launcher && \
    chmod +x /usr/local/bin/dkn-compute-launcher && \
    apt clean
RUN echo "strict_chain\nproxy_dns\ntcp_read_time_out 15000\ntcp_connect_time_out 8000\n[ProxyList]\nhttp $proxy_ip $proxy_port $proxy_user $proxy_pass" > /etc/proxychains4.conf
CMD proxychains4 dkn-compute-launcher --port=$port start
EOF

    docker build -t dria_node_$port "$node_dir"
    docker run -d --name dria_node_$port --restart unless-stopped dria_node_$port

    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É $port —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ ${proxy_ip}:${proxy_port}${CLR_RESET}"
}

list_nodes() {
    echo -e "${CLR_INFO}–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Dria:${CLR_RESET}"
    docker ps --filter name=dria_node_ --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
}

gpu_status() {
    echo -e "${CLR_INFO}–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ GPU:${CLR_RESET}"
    nvidia-smi
}

schedule_restarts() {
    echo -e "${CLR_INFO}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ —Ñ–æ–Ω–µ...${CLR_RESET}"
    containers=$(docker ps --filter name=dria_node_ --format "{{.Names}}")
    for container in $containers; do
        delay=$((RANDOM % 3600 + 3600))
        (sleep $delay && echo -e "${CLR_WARNING}üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ $container —á–µ—Ä–µ–∑ $delay —Å–µ–∫...${CLR_RESET}" && docker restart "$container") &
    done
    echo -e "${CLR_SUCCESS}‚úÖ –¢–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.${CLR_RESET}"
}

# –ú–µ–Ω—é
function show_menu() {
    show_logo
    echo -e "${CLR_GREEN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É (—Å—Ç–∞—Ä–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)${CLR_RESET}"
    echo -e "${CLR_GREEN}2) ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}3) ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}4) üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}5) üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π${CLR_RESET}"
    echo -e "${CLR_GREEN}6) üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}7) ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é Docker-–Ω–æ–¥—É —Å –ø—Ä–æ–∫—Å–∏${CLR_RESET}"
    echo -e "${CLR_GREEN}8) üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ Docker-–Ω–æ–¥${CLR_RESET}"
    echo -e "${CLR_GREEN}9) üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≥—Ä—É–∑–∫—É GPU${CLR_RESET}"
    echo -e "${CLR_GREEN}10) üîÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤${CLR_RESET}"
    echo -e "${CLR_GREEN}11) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"
    echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:${CLR_RESET}"
    read -r choice

    case $choice in
        1) install_node ;;
        2) configure_node ;;
        3) start_node ;;
        4) update_node ;;
        5) measure_models ;;
        6) remove_node ;;
        7) add_new_docker_node ;;
        8) list_nodes ;;
        9) gpu_status ;;
        10) schedule_restarts ;;
        11) echo -e "${CLR_ERROR}–í—ã—Ö–æ–¥...${CLR_RESET}" ; exit 0 ;;
        *) echo -e "${CLR_WARNING}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}" ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
