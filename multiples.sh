#!/bin/bash

CLR_INFO='\033[1;97;44m'
CLR_SUCCESS='\033[1;97;42m'
CLR_WARNING='\033[1;30;103m'
CLR_ERROR='\033[1;97;41m'
CLR_GREEN='\033[0;32m'
CLR_RESET='\033[0m'

# –õ–æ–≥–æ—Ç–∏–ø
function show_logo() {
    echo -e "${CLR_GREEN}    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã Multiple   ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
function install_dependencies() {
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y curl tar wget
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã Multiple
function install_node() {
    install_dependencies
    ARCH=$(uname -m)
    if [[ "$ARCH" == "x86_64" || "$ARCH" == "aarch64" ]]; then
        CLIENT_URL="https://mdeck-download.s3.us-east-1.amazonaws.com/client/linux/install.sh"
        sleep 5
    else
        echo -e "${CLR_ERROR}‚ùå –û—à–∏–±–∫–∞: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ $ARCH –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!${CLR_RESET}"
        exit 1
    fi

    echo -e "${CLR_INFO}üåç –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª...${CLR_RESET}"
    wget -O install.sh "$CLIENT_URL"
    echo -e "${CLR_INFO}‚öôÔ∏è –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...${CLR_RESET}"
    sleep 5
    source ./install.sh

    echo -e "${CLR_INFO}üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...${CLR_RESET}"
    wget -O update.sh https://mdeck-download.s3.us-east-1.amazonaws.com/client/linux/update.sh
    echo -e "${CLR_INFO}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...${CLR_RESET}"
    sleep 5
    source ./update.sh

    echo -e "${CLR_INFO}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Multiple...${CLR_RESET}"
    wget -O start.sh https://mdeck-download.s3.us-east-1.amazonaws.com/client/linux/start.sh
    sleep 5
    source ./start.sh

    echo -e "${CLR_WARNING}üîó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Account ID:${CLR_RESET}"
    read -r IDENTIFIER
    echo -e "${CLR_WARNING}üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à PIN:${CLR_RESET}"
    read -r PIN

    echo -e "${CLR_WARNING}üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç...${CLR_RESET}"
    multiple-cli bind --bandwidth-download 100 --identifier "$IDENTIFIER" --pin "$PIN" --storage 200 --bandwidth-upload 100

    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ Multiple —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!${CLR_RESET}"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function reinstal_node() {
    echo -e "${CLR_WARNING}–û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–¥—É Multiple...${CLR_RESET}"
    pkill -f multiple-node
    sudo rm -rf ~/multipleforlinux multipleforlinux.tar
    sleep 5
    install_node
    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ Multiple —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!${CLR_RESET}"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function remove_node() {
    echo -e "${CLR_ERROR}–£–¥–∞–ª—è–µ–º –Ω–æ–¥—É Multiple...${CLR_RESET}"
    pkill -f multiple-node
    sudo rm -rf ~/MultipleForLinux multipleforlinux.tar
    rm -rf multiple_node.sh
    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ Multiple —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${CLR_RESET}"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
function check_status() {
    if [ -d ~/multipleforlinux ]; then
        cd ~/multipleforlinux || exit
        ./multiple-cli status
    else
        echo -e "${CLR_WARNING}–ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.${CLR_RESET}"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Multiple —á–µ—Ä–µ–∑ Docker
function install_multiple_nodes_docker() {
    echo -e "${CLR_WARNING}üîó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Account ID:${CLR_RESET}"
    read -r IDENTIFIER
    echo -e "${CLR_WARNING}üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à PIN:${CLR_RESET}"
    read -r PIN

    echo -e "${CLR_WARNING}üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 20):${CLR_RESET}"
    read -r NODE_COUNT

    echo -e "${CLR_INFO}üê≥ –°–æ–∑–¥–∞—ë–º Dockerfile –∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞...${CLR_RESET}"
    mkdir -p ~/multiple_docker && cd ~/multiple_docker

    cat <<EOF > Dockerfile
FROM ubuntu:latest
RUN apt-get update && apt-get install -y curl tar wget
RUN wget -O install.sh https://mdeck-download.s3.us-east-1.amazonaws.com/client/linux/install.sh && \\
    chmod +x install.sh && ./install.sh && rm install.sh
RUN wget -O update.sh https://mdeck-download.s3.us-east-1.amazonaws.com/client/linux/update.sh && \\
    chmod +x update.sh && ./update.sh && rm update.sh
COPY start-node.sh /start-node.sh
RUN chmod +x /start-node.sh
ENTRYPOINT ["/start-node.sh"]
EOF

    cat <<EOF > start-node.sh
#!/bin/bash
nohup multiple-node > /var/log/multiple-node.log 2>&1 &
sleep 5
multiple-cli bind --bandwidth-download 100 --identifier \$IDENTIFIER --pin \$PIN --storage 200 --bandwidth-upload 100
tail -f /dev/null
EOF

    docker build -t multiple-node .

    for i in \$(seq 1 \$NODE_COUNT); do
        docker run -d \\
            --name multiple-node-\${i} \\
            -e IDENTIFIER=\$IDENTIFIER \\
            -e PIN=\$PIN \\
            multiple-node
    done

    echo -e "${CLR_SUCCESS}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ \$NODE_COUNT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –Ω–æ–¥–∞–º–∏ Multiple!${CLR_RESET}"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function restart_all_nodes() {
    echo -e "${CLR_INFO}üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã multiple-node...${CLR_RESET}"
    for container in \$(docker ps -a --filter "name=multiple-node-" --format "{{.Names}}"); do
        docker restart \$container
    done
    echo -e "${CLR_SUCCESS}‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${CLR_RESET}"
}

# –ú–µ–Ω—é
function show_menu() {
    show_logo
    echo -e "${CLR_GREEN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}2) üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}3) üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}4) üíª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞${CLR_RESET}"
    echo -e "${CLR_GREEN}5) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"
    echo -e "${CLR_GREEN}6) üê≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–¥ —á–µ—Ä–µ–∑ Docker${CLR_RESET}"
    echo -e "${CLR_GREEN}7) üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ Docker-–Ω–æ–¥—ã${CLR_RESET}"

    echo -e "${CLR_WARNING}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${CLR_RESET}"
    read -r choice
    case $choice in
        1) install_node ;;
        2) reinstal_node ;;
        3) remove_node ;;
        4) check_status ;;
        5) echo -e "${CLR_SUCCESS}–í—ã—Ö–æ–¥...${CLR_RESET}" ;;
        6) install_multiple_nodes_docker ;;
        7) restart_all_nodes ;;
        *) echo -e "${CLR_ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 7.${CLR_RESET}" ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
